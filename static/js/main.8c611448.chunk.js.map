{"version":3,"sources":["components/InputTodo.js","components/EditTodo.js","components/ListTodo.js","App.js","serviceWorker.js","index.js"],"names":["InputTodo","useState","description","setDescription","onSubmitForm","e","a","preventDefault","body","fetch","method","headers","JSON","stringify","window","location","console","error","message","className","onSubmit","type","aria-label","value","onChange","target","EditTodo","todo","updateDescription","todo_id","data-toggle","data-target","id","onClick","data-dismiss","ListTodo","todos","setTodos","getTodos","resp","json","jsonData","deleteTodo","filter","useEffect","map","key","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uMAwCeA,EAtCG,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACfC,EADe,KACFC,EADE,KAOhBC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACnBD,EAAEE,iBADiB,SAGXC,EAAO,CAAEN,eAHE,SAIXO,MAAM,mDAAoD,CAC9DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BH,KAAMI,KAAKC,UAAUL,KAPN,OASjBM,OAAOC,SAAW,IATD,gDAWjBC,QAAQC,MAAM,KAAIC,SAXD,yDAAH,sDAclB,OACE,oCACE,wBAAIC,UAAU,oBAAd,oBACA,0BAAMA,UAAU,cAAcC,SAAUhB,GACtC,2BACEiB,KAAK,OACLF,UAAU,eACVG,aAAW,qCACXC,MAAOrB,EACPsB,SA3BkB,SAACnB,GACzBF,EAAeE,EAAEoB,OAAOF,UA4BpB,4BAAQJ,UAAU,mBAAlB,UCkDOO,EAlFE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACS1B,mBAAS0B,EAAKzB,aADvB,mBACtBA,EADsB,KACTC,EADS,KAIvByB,EAAiB,uCAAG,WAAMvB,GAAN,eAAAC,EAAA,6DACxBD,EAAEE,iBADsB,SAGhBC,EAAO,CAAEN,eAHO,SAKhBO,MAAM,oDAAD,OAC2CkB,EAAKE,SACzD,CACEnB,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BH,KAAMI,KAAKC,UAAUL,KAVH,OAatBM,OAAOC,SAAW,IAbI,gDAetBC,QAAQC,MAAM,KAAIC,SAfI,yDAAH,sDAmBvB,OACE,oCACE,4BACEG,KAAK,SACLF,UAAU,kBACVW,cAAY,QACZC,cAAA,aAAmBJ,EAAKE,UAJ1B,QAQA,yBACEV,UAAU,QACVa,GAAE,YAAOL,EAAKE,SACdI,QAAS,kBAAM9B,EAAewB,EAAKzB,eACnC,yBAAKiB,UAAU,gBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,eAAd,aACA,4BACEE,KAAK,SACLF,UAAU,QACVe,eAAa,QACbD,QAAS,kBAAM9B,EAAewB,EAAKzB,eAJrC,SASF,yBAAKiB,UAAU,cACb,2BACEE,KAAK,OACLF,UAAU,eACVI,MAAOrB,EACPsB,SAAU,SAAAnB,GAAC,OAAIF,EAAeE,EAAEoB,OAAOF,WAI3C,yBAAKJ,UAAU,gBACb,4BACEE,KAAK,SACLF,UAAU,kBACVe,eAAa,QACbD,QAAS,SAAA5B,GAAC,OAAIuB,EAAkBvB,KAJlC,QAOA,4BACEgB,KAAK,SACLF,UAAU,iBACVe,eAAa,QACbD,QAAS,kBAAM9B,EAAewB,EAAKzB,eAJrC,eCHCiC,EA/DE,WAAO,IAAD,EACKlC,mBAAS,IADd,mBACdmC,EADc,KACPC,EADO,KAEfC,EAAQ,uCAAG,8BAAAhC,EAAA,+EAEMG,MACjB,oDAHW,cAEP8B,EAFO,gBAKUA,EAAKC,OALf,OAKPC,EALO,OAMbJ,EAASI,GANI,kDAQbzB,QAAQC,MAAM,KAAIC,SARL,0DAAH,qDAaRwB,EAAU,uCAAG,WAAOV,GAAP,SAAA1B,EAAA,+EAETG,MAAM,oDAAD,OAAqDuB,GAAM,CACpEtB,OAAQ,WAHK,OAKf2B,EAASD,EAAMO,QAAO,SAAChB,GAAD,OAAUA,EAAKE,UAAYG,MALlC,+CAOfhB,QAAQC,MAAM,KAAIC,SAPH,wDAAH,sDAchB,OAHA0B,qBAAU,WACRN,MACC,IAED,oCACG,IACD,2BAAOnB,UAAU,cACf,+BACE,4BACE,2CACA,oCACA,wCAGJ,+BACGiB,EAAMS,KAAI,SAAClB,GAAD,OACT,wBAAImB,IAAKnB,EAAKE,SACZ,4BAAKF,EAAKzB,aACV,4BACE,kBAAC,EAAD,CAAUyB,KAAMA,KAElB,4BACG,IACD,4BACER,UAAU,iBACVc,QAAS,kBAAMS,EAAWf,EAAKE,WAFjC,UAIU,aCzCXkB,MAXf,WACE,OACE,oCACE,yBAAK5B,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCGF6B,EAAcC,QACW,cAA7BnC,OAAOC,SAASmC,UAEe,UAA7BpC,OAAOC,SAASmC,UAEhBpC,OAAOC,SAASmC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BjD,QAAQkD,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlB3C,QAAQkD,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAApD,GACLD,QAAQC,MAAM,4CAA6CA,MC1FjEqD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,QAAwB9D,OAAOC,SAAS8D,MACpDC,SAAWhE,OAAOC,SAAS+D,OAIvC,OAGFhE,OAAOiE,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,QAAN,sBAEP5B,IAgEV,SAAiCK,EAAOC,GAEtC7C,MAAM4C,EAAO,CACX1C,QAAS,CAAE,iBAAkB,YAE5B+C,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASrE,QAAQuE,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7B5C,OAAOC,SAASwE,eAKpBnC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLrD,QAAQkD,IACN,oEAvFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjC1C,QAAQkD,IACN,iHAMJd,EAAgBC,EAAOC,OCrC/BE,I","file":"static/js/main.8c611448.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst InputTodo = () => {\n  const [description, setDescription] = useState('');\n\n  const handleInputChange = (e) => {\n    setDescription(e.target.value);\n  };\n\n  const onSubmitForm = async (e) => {\n    e.preventDefault();\n    try {\n      const body = { description };\n      await fetch('https://pacific-beyond-99149.herokuapp.com/todos', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body),\n      });\n      window.location = '/';\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n  return (\n    <>\n      <h1 className='text-center mt-5'>Journal for task</h1>\n      <form className='d-flex mt-5' onSubmit={onSubmitForm}>\n        <input\n          type='text'\n          className='form-control'\n          aria-label=\"What do you want to achieve today?\"\n          value={description}\n          onChange={handleInputChange}\n        />\n        <button className='btn btn-success'>Add</button>\n      </form>\n    </>\n  );\n};\n\nexport default InputTodo;\n","import React, { useState } from 'react';\n\nconst EditTodo = ({ todo }) => {\n  const [description, setDescription] = useState(todo.description);\n  //editText function\n\n  const updateDescription = async e => {\n    e.preventDefault();\n    try {\n      const body = { description };\n\n      await fetch(\n        `https://pacific-beyond-99149.herokuapp.com/todos/${todo.todo_id}`,\n        {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(body),\n        }\n      );\n      window.location = '/';\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  return (\n    <>\n      <button\n        type='button'\n        className='btn btn-warning'\n        data-toggle='modal'\n        data-target={`#id${todo.todo_id}`}>\n        Edit\n      </button>\n\n      <div\n        className='modal'\n        id={`id${todo.todo_id}`}\n        onClick={() => setDescription(todo.description)}>\n        <div className='modal-dialog'>\n          <div className='modal-content'>\n            <div className='modal-header'>\n              <h4 className='modal-title'>Edit Todo</h4>\n              <button\n                type='button'\n                className='close'\n                data-dismiss='modal'\n                onClick={() => setDescription(todo.description)}>\n                &times;\n              </button>\n            </div>\n\n            <div className='modal-body'>\n              <input\n                type='text'\n                className='form-control'\n                value={description}\n                onChange={e => setDescription(e.target.value)}\n              />\n            </div>\n\n            <div className='modal-footer'>\n              <button\n                type='button'\n                className='btn btn-warning'\n                data-dismiss='modal'\n                onClick={e => updateDescription(e)}>\n                Edit\n              </button>\n              <button\n                type='button'\n                className='btn btn-danger'\n                data-dismiss='modal'\n                onClick={() => setDescription(todo.description)}>\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EditTodo;\n","import React, { useEffect, useState } from 'react';\nimport EditTodo from './EditTodo';\n\nconst ListTodo = () => {\n  const [todos, setTodos] = useState([]);\n  const getTodos = async () => {\n    try {\n      const resp = await fetch(\n        'https://pacific-beyond-99149.herokuapp.com/todos'\n      );\n      const jsonData = await resp.json();\n      setTodos(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  // delete todo function\n  const deleteTodo = async (id) => {\n    try {\n      await fetch(`https://pacific-beyond-99149.herokuapp.com/todos/${id}`, {\n        method: 'DELETE',\n      });\n      setTodos(todos.filter((todo) => todo.todo_id !== id));\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getTodos();\n  }, []);\n  return (\n    <>\n      {' '}\n      <table className='table mt-5'>\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th>Edit</th>\n            <th>Delete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map((todo) => (\n            <tr key={todo.todo_id}>\n              <td>{todo.description}</td>\n              <td>\n                <EditTodo todo={todo} />\n              </td>\n              <td>\n                {' '}\n                <button\n                  className='btn btn-danger'\n                  onClick={() => deleteTodo(todo.todo_id)}>\n                  Delete\n                </button>{' '}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default ListTodo;\n","import React from 'react';\nimport InputTodo from './components/InputTodo';\nimport ListTodo from './components/ListTodo'\n\nfunction App() {\n  return (\n    <>\n      <div className='container'>\n        <InputTodo />\n        <ListTodo />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}